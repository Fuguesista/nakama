name: Golang

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  deployment:
  release:
    types: [published]

jobs:
  golang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42.1
          # skip-go-installation: true

      - name: Test
        run: go test ./... -race -count 1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: nicolasparada
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: nicolasparada/nakama:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Secure copy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: prometheus.yml,docker-compose.yaml
          target: ./

      - name: SSH & docker-compose up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # TODO: docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
          script: |
            echo "TOKEN_KEY=${{ secrets.TOKEN_KEY }}" >| .env \
            && echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env \
            && echo "TRAEFIK_PILOT_TOKEN=${{ secrets.TRAEFIK_PILOT_TOKEN }}" >> .env \
            && echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env \
            && echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env \
            && echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env \
            && echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env \
            && echo "GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}" >> .env \
            && echo "GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}" >> .env \
            && echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env \
            && echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env \
            && echo "VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}" >> .env \
            && echo "VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}" >> .env \
            && docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true \
            && docker plugin disable loki --force \
            && docker plugin upgrade loki grafana/loki-docker-driver:latest --grant-all-permissions \
            && docker-compose pull \
            && docker-compose down \
            && docker plugin enable loki \
            && docker-compose up -d
