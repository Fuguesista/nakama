// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/nicolasparada/nakama/internal/service"
	"io"
	"sync"
)

var (
	lockServiceMockAuthURI                 sync.RWMutex
	lockServiceMockAuthUser                sync.RWMutex
	lockServiceMockAuthUserIDFromToken     sync.RWMutex
	lockServiceMockCommentStream           sync.RWMutex
	lockServiceMockComments                sync.RWMutex
	lockServiceMockCreateComment           sync.RWMutex
	lockServiceMockCreatePost              sync.RWMutex
	lockServiceMockCreateUser              sync.RWMutex
	lockServiceMockDeleteTimelineItem      sync.RWMutex
	lockServiceMockDevLogin                sync.RWMutex
	lockServiceMockFollowees               sync.RWMutex
	lockServiceMockFollowers               sync.RWMutex
	lockServiceMockHasUnreadNotifications  sync.RWMutex
	lockServiceMockMarkNotificationAsRead  sync.RWMutex
	lockServiceMockMarkNotificationsAsRead sync.RWMutex
	lockServiceMockNotificationStream      sync.RWMutex
	lockServiceMockNotifications           sync.RWMutex
	lockServiceMockPost                    sync.RWMutex
	lockServiceMockPosts                   sync.RWMutex
	lockServiceMockSendMagicLink           sync.RWMutex
	lockServiceMockTimeline                sync.RWMutex
	lockServiceMockTimelineItemStream      sync.RWMutex
	lockServiceMockToggleCommentLike       sync.RWMutex
	lockServiceMockToggleFollow            sync.RWMutex
	lockServiceMockTogglePostLike          sync.RWMutex
	lockServiceMockTogglePostSubscription  sync.RWMutex
	lockServiceMockToken                   sync.RWMutex
	lockServiceMockUpdateAvatar            sync.RWMutex
	lockServiceMockUser                    sync.RWMutex
	lockServiceMockUsernames               sync.RWMutex
	lockServiceMockUsers                   sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             AuthURIFunc: func(ctx context.Context, verificationCode string, redirectURI string) (string, error) {
// 	               panic("mock out the AuthURI method")
//             },
//             AuthUserFunc: func(ctx context.Context) (service.User, error) {
// 	               panic("mock out the AuthUser method")
//             },
//             AuthUserIDFromTokenFunc: func(token string) (string, error) {
// 	               panic("mock out the AuthUserIDFromToken method")
//             },
//             CommentStreamFunc: func(ctx context.Context, postID string) (<-chan service.Comment, error) {
// 	               panic("mock out the CommentStream method")
//             },
//             CommentsFunc: func(ctx context.Context, postID string, last int, before string) ([]service.Comment, error) {
// 	               panic("mock out the Comments method")
//             },
//             CreateCommentFunc: func(ctx context.Context, postID string, content string) (service.Comment, error) {
// 	               panic("mock out the CreateComment method")
//             },
//             CreatePostFunc: func(ctx context.Context, content string, spoilerOf *string, nsfw bool) (service.TimelineItem, error) {
// 	               panic("mock out the CreatePost method")
//             },
//             CreateUserFunc: func(ctx context.Context, email string, username string) error {
// 	               panic("mock out the CreateUser method")
//             },
//             DeleteTimelineItemFunc: func(ctx context.Context, timelineItemID string) error {
// 	               panic("mock out the DeleteTimelineItem method")
//             },
//             DevLoginFunc: func(ctx context.Context, email string) (service.DevLoginOutput, error) {
// 	               panic("mock out the DevLogin method")
//             },
//             FolloweesFunc: func(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error) {
// 	               panic("mock out the Followees method")
//             },
//             FollowersFunc: func(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error) {
// 	               panic("mock out the Followers method")
//             },
//             HasUnreadNotificationsFunc: func(ctx context.Context) (bool, error) {
// 	               panic("mock out the HasUnreadNotifications method")
//             },
//             MarkNotificationAsReadFunc: func(ctx context.Context, notificationID string) error {
// 	               panic("mock out the MarkNotificationAsRead method")
//             },
//             MarkNotificationsAsReadFunc: func(ctx context.Context) error {
// 	               panic("mock out the MarkNotificationsAsRead method")
//             },
//             NotificationStreamFunc: func(ctx context.Context) (<-chan service.Notification, error) {
// 	               panic("mock out the NotificationStream method")
//             },
//             NotificationsFunc: func(ctx context.Context, last int, before string) ([]service.Notification, error) {
// 	               panic("mock out the Notifications method")
//             },
//             PostFunc: func(ctx context.Context, postID string) (service.Post, error) {
// 	               panic("mock out the Post method")
//             },
//             PostsFunc: func(ctx context.Context, username string, last int, before string) ([]service.Post, error) {
// 	               panic("mock out the Posts method")
//             },
//             SendMagicLinkFunc: func(ctx context.Context, email string, redirectURI string) error {
// 	               panic("mock out the SendMagicLink method")
//             },
//             TimelineFunc: func(ctx context.Context, last int, before string) ([]service.TimelineItem, error) {
// 	               panic("mock out the Timeline method")
//             },
//             TimelineItemStreamFunc: func(ctx context.Context) (<-chan service.TimelineItem, error) {
// 	               panic("mock out the TimelineItemStream method")
//             },
//             ToggleCommentLikeFunc: func(ctx context.Context, commentID string) (service.ToggleLikeOutput, error) {
// 	               panic("mock out the ToggleCommentLike method")
//             },
//             ToggleFollowFunc: func(ctx context.Context, username string) (service.ToggleFollowOutput, error) {
// 	               panic("mock out the ToggleFollow method")
//             },
//             TogglePostLikeFunc: func(ctx context.Context, postID string) (service.ToggleLikeOutput, error) {
// 	               panic("mock out the TogglePostLike method")
//             },
//             TogglePostSubscriptionFunc: func(ctx context.Context, postID string) (service.ToggleSubscriptionOutput, error) {
// 	               panic("mock out the TogglePostSubscription method")
//             },
//             TokenFunc: func(ctx context.Context) (service.TokenOutput, error) {
// 	               panic("mock out the Token method")
//             },
//             UpdateAvatarFunc: func(ctx context.Context, r io.Reader) (string, error) {
// 	               panic("mock out the UpdateAvatar method")
//             },
//             UserFunc: func(ctx context.Context, username string) (service.UserProfile, error) {
// 	               panic("mock out the User method")
//             },
//             UsernamesFunc: func(ctx context.Context, startingWith string, first int, after string) ([]string, error) {
// 	               panic("mock out the Usernames method")
//             },
//             UsersFunc: func(ctx context.Context, search string, first int, after string) ([]service.UserProfile, error) {
// 	               panic("mock out the Users method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// AuthURIFunc mocks the AuthURI method.
	AuthURIFunc func(ctx context.Context, verificationCode string, redirectURI string) (string, error)

	// AuthUserFunc mocks the AuthUser method.
	AuthUserFunc func(ctx context.Context) (service.User, error)

	// AuthUserIDFromTokenFunc mocks the AuthUserIDFromToken method.
	AuthUserIDFromTokenFunc func(token string) (string, error)

	// CommentStreamFunc mocks the CommentStream method.
	CommentStreamFunc func(ctx context.Context, postID string) (<-chan service.Comment, error)

	// CommentsFunc mocks the Comments method.
	CommentsFunc func(ctx context.Context, postID string, last int, before string) ([]service.Comment, error)

	// CreateCommentFunc mocks the CreateComment method.
	CreateCommentFunc func(ctx context.Context, postID string, content string) (service.Comment, error)

	// CreatePostFunc mocks the CreatePost method.
	CreatePostFunc func(ctx context.Context, content string, spoilerOf *string, nsfw bool) (service.TimelineItem, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, email string, username string) error

	// DeleteTimelineItemFunc mocks the DeleteTimelineItem method.
	DeleteTimelineItemFunc func(ctx context.Context, timelineItemID string) error

	// DevLoginFunc mocks the DevLogin method.
	DevLoginFunc func(ctx context.Context, email string) (service.DevLoginOutput, error)

	// FolloweesFunc mocks the Followees method.
	FolloweesFunc func(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error)

	// FollowersFunc mocks the Followers method.
	FollowersFunc func(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error)

	// HasUnreadNotificationsFunc mocks the HasUnreadNotifications method.
	HasUnreadNotificationsFunc func(ctx context.Context) (bool, error)

	// MarkNotificationAsReadFunc mocks the MarkNotificationAsRead method.
	MarkNotificationAsReadFunc func(ctx context.Context, notificationID string) error

	// MarkNotificationsAsReadFunc mocks the MarkNotificationsAsRead method.
	MarkNotificationsAsReadFunc func(ctx context.Context) error

	// NotificationStreamFunc mocks the NotificationStream method.
	NotificationStreamFunc func(ctx context.Context) (<-chan service.Notification, error)

	// NotificationsFunc mocks the Notifications method.
	NotificationsFunc func(ctx context.Context, last int, before string) ([]service.Notification, error)

	// PostFunc mocks the Post method.
	PostFunc func(ctx context.Context, postID string) (service.Post, error)

	// PostsFunc mocks the Posts method.
	PostsFunc func(ctx context.Context, username string, last int, before string) ([]service.Post, error)

	// SendMagicLinkFunc mocks the SendMagicLink method.
	SendMagicLinkFunc func(ctx context.Context, email string, redirectURI string) error

	// TimelineFunc mocks the Timeline method.
	TimelineFunc func(ctx context.Context, last int, before string) ([]service.TimelineItem, error)

	// TimelineItemStreamFunc mocks the TimelineItemStream method.
	TimelineItemStreamFunc func(ctx context.Context) (<-chan service.TimelineItem, error)

	// ToggleCommentLikeFunc mocks the ToggleCommentLike method.
	ToggleCommentLikeFunc func(ctx context.Context, commentID string) (service.ToggleLikeOutput, error)

	// ToggleFollowFunc mocks the ToggleFollow method.
	ToggleFollowFunc func(ctx context.Context, username string) (service.ToggleFollowOutput, error)

	// TogglePostLikeFunc mocks the TogglePostLike method.
	TogglePostLikeFunc func(ctx context.Context, postID string) (service.ToggleLikeOutput, error)

	// TogglePostSubscriptionFunc mocks the TogglePostSubscription method.
	TogglePostSubscriptionFunc func(ctx context.Context, postID string) (service.ToggleSubscriptionOutput, error)

	// TokenFunc mocks the Token method.
	TokenFunc func(ctx context.Context) (service.TokenOutput, error)

	// UpdateAvatarFunc mocks the UpdateAvatar method.
	UpdateAvatarFunc func(ctx context.Context, r io.Reader) (string, error)

	// UserFunc mocks the User method.
	UserFunc func(ctx context.Context, username string) (service.UserProfile, error)

	// UsernamesFunc mocks the Usernames method.
	UsernamesFunc func(ctx context.Context, startingWith string, first int, after string) ([]string, error)

	// UsersFunc mocks the Users method.
	UsersFunc func(ctx context.Context, search string, first int, after string) ([]service.UserProfile, error)

	// calls tracks calls to the methods.
	calls struct {
		// AuthURI holds details about calls to the AuthURI method.
		AuthURI []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// VerificationCode is the verificationCode argument value.
			VerificationCode string
			// RedirectURI is the redirectURI argument value.
			RedirectURI string
		}
		// AuthUser holds details about calls to the AuthUser method.
		AuthUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// AuthUserIDFromToken holds details about calls to the AuthUserIDFromToken method.
		AuthUserIDFromToken []struct {
			// Token is the token argument value.
			Token string
		}
		// CommentStream holds details about calls to the CommentStream method.
		CommentStream []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
		}
		// Comments holds details about calls to the Comments method.
		Comments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
			// Last is the last argument value.
			Last int
			// Before is the before argument value.
			Before string
		}
		// CreateComment holds details about calls to the CreateComment method.
		CreateComment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
			// Content is the content argument value.
			Content string
		}
		// CreatePost holds details about calls to the CreatePost method.
		CreatePost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Content is the content argument value.
			Content string
			// SpoilerOf is the spoilerOf argument value.
			SpoilerOf *string
			// Nsfw is the nsfw argument value.
			Nsfw bool
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Username is the username argument value.
			Username string
		}
		// DeleteTimelineItem holds details about calls to the DeleteTimelineItem method.
		DeleteTimelineItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TimelineItemID is the timelineItemID argument value.
			TimelineItemID string
		}
		// DevLogin holds details about calls to the DevLogin method.
		DevLogin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// Followees holds details about calls to the Followees method.
		Followees []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// First is the first argument value.
			First int
			// After is the after argument value.
			After string
		}
		// Followers holds details about calls to the Followers method.
		Followers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// First is the first argument value.
			First int
			// After is the after argument value.
			After string
		}
		// HasUnreadNotifications holds details about calls to the HasUnreadNotifications method.
		HasUnreadNotifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// MarkNotificationAsRead holds details about calls to the MarkNotificationAsRead method.
		MarkNotificationAsRead []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NotificationID is the notificationID argument value.
			NotificationID string
		}
		// MarkNotificationsAsRead holds details about calls to the MarkNotificationsAsRead method.
		MarkNotificationsAsRead []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// NotificationStream holds details about calls to the NotificationStream method.
		NotificationStream []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Notifications holds details about calls to the Notifications method.
		Notifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Last is the last argument value.
			Last int
			// Before is the before argument value.
			Before string
		}
		// Post holds details about calls to the Post method.
		Post []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
		}
		// Posts holds details about calls to the Posts method.
		Posts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Last is the last argument value.
			Last int
			// Before is the before argument value.
			Before string
		}
		// SendMagicLink holds details about calls to the SendMagicLink method.
		SendMagicLink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// RedirectURI is the redirectURI argument value.
			RedirectURI string
		}
		// Timeline holds details about calls to the Timeline method.
		Timeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Last is the last argument value.
			Last int
			// Before is the before argument value.
			Before string
		}
		// TimelineItemStream holds details about calls to the TimelineItemStream method.
		TimelineItemStream []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ToggleCommentLike holds details about calls to the ToggleCommentLike method.
		ToggleCommentLike []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CommentID is the commentID argument value.
			CommentID string
		}
		// ToggleFollow holds details about calls to the ToggleFollow method.
		ToggleFollow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// TogglePostLike holds details about calls to the TogglePostLike method.
		TogglePostLike []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
		}
		// TogglePostSubscription holds details about calls to the TogglePostSubscription method.
		TogglePostSubscription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PostID is the postID argument value.
			PostID string
		}
		// Token holds details about calls to the Token method.
		Token []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAvatar holds details about calls to the UpdateAvatar method.
		UpdateAvatar []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R io.Reader
		}
		// User holds details about calls to the User method.
		User []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
		}
		// Usernames holds details about calls to the Usernames method.
		Usernames []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StartingWith is the startingWith argument value.
			StartingWith string
			// First is the first argument value.
			First int
			// After is the after argument value.
			After string
		}
		// Users holds details about calls to the Users method.
		Users []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Search is the search argument value.
			Search string
			// First is the first argument value.
			First int
			// After is the after argument value.
			After string
		}
	}
}

// AuthURI calls AuthURIFunc.
func (mock *ServiceMock) AuthURI(ctx context.Context, verificationCode string, redirectURI string) (string, error) {
	if mock.AuthURIFunc == nil {
		panic("ServiceMock.AuthURIFunc: method is nil but Service.AuthURI was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		VerificationCode string
		RedirectURI      string
	}{
		Ctx:              ctx,
		VerificationCode: verificationCode,
		RedirectURI:      redirectURI,
	}
	lockServiceMockAuthURI.Lock()
	mock.calls.AuthURI = append(mock.calls.AuthURI, callInfo)
	lockServiceMockAuthURI.Unlock()
	return mock.AuthURIFunc(ctx, verificationCode, redirectURI)
}

// AuthURICalls gets all the calls that were made to AuthURI.
// Check the length with:
//     len(mockedService.AuthURICalls())
func (mock *ServiceMock) AuthURICalls() []struct {
	Ctx              context.Context
	VerificationCode string
	RedirectURI      string
} {
	var calls []struct {
		Ctx              context.Context
		VerificationCode string
		RedirectURI      string
	}
	lockServiceMockAuthURI.RLock()
	calls = mock.calls.AuthURI
	lockServiceMockAuthURI.RUnlock()
	return calls
}

// AuthUser calls AuthUserFunc.
func (mock *ServiceMock) AuthUser(ctx context.Context) (service.User, error) {
	if mock.AuthUserFunc == nil {
		panic("ServiceMock.AuthUserFunc: method is nil but Service.AuthUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockAuthUser.Lock()
	mock.calls.AuthUser = append(mock.calls.AuthUser, callInfo)
	lockServiceMockAuthUser.Unlock()
	return mock.AuthUserFunc(ctx)
}

// AuthUserCalls gets all the calls that were made to AuthUser.
// Check the length with:
//     len(mockedService.AuthUserCalls())
func (mock *ServiceMock) AuthUserCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockAuthUser.RLock()
	calls = mock.calls.AuthUser
	lockServiceMockAuthUser.RUnlock()
	return calls
}

// AuthUserIDFromToken calls AuthUserIDFromTokenFunc.
func (mock *ServiceMock) AuthUserIDFromToken(token string) (string, error) {
	if mock.AuthUserIDFromTokenFunc == nil {
		panic("ServiceMock.AuthUserIDFromTokenFunc: method is nil but Service.AuthUserIDFromToken was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	lockServiceMockAuthUserIDFromToken.Lock()
	mock.calls.AuthUserIDFromToken = append(mock.calls.AuthUserIDFromToken, callInfo)
	lockServiceMockAuthUserIDFromToken.Unlock()
	return mock.AuthUserIDFromTokenFunc(token)
}

// AuthUserIDFromTokenCalls gets all the calls that were made to AuthUserIDFromToken.
// Check the length with:
//     len(mockedService.AuthUserIDFromTokenCalls())
func (mock *ServiceMock) AuthUserIDFromTokenCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	lockServiceMockAuthUserIDFromToken.RLock()
	calls = mock.calls.AuthUserIDFromToken
	lockServiceMockAuthUserIDFromToken.RUnlock()
	return calls
}

// CommentStream calls CommentStreamFunc.
func (mock *ServiceMock) CommentStream(ctx context.Context, postID string) (<-chan service.Comment, error) {
	if mock.CommentStreamFunc == nil {
		panic("ServiceMock.CommentStreamFunc: method is nil but Service.CommentStream was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		PostID string
	}{
		Ctx:    ctx,
		PostID: postID,
	}
	lockServiceMockCommentStream.Lock()
	mock.calls.CommentStream = append(mock.calls.CommentStream, callInfo)
	lockServiceMockCommentStream.Unlock()
	return mock.CommentStreamFunc(ctx, postID)
}

// CommentStreamCalls gets all the calls that were made to CommentStream.
// Check the length with:
//     len(mockedService.CommentStreamCalls())
func (mock *ServiceMock) CommentStreamCalls() []struct {
	Ctx    context.Context
	PostID string
} {
	var calls []struct {
		Ctx    context.Context
		PostID string
	}
	lockServiceMockCommentStream.RLock()
	calls = mock.calls.CommentStream
	lockServiceMockCommentStream.RUnlock()
	return calls
}

// Comments calls CommentsFunc.
func (mock *ServiceMock) Comments(ctx context.Context, postID string, last int, before string) ([]service.Comment, error) {
	if mock.CommentsFunc == nil {
		panic("ServiceMock.CommentsFunc: method is nil but Service.Comments was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		PostID string
		Last   int
		Before string
	}{
		Ctx:    ctx,
		PostID: postID,
		Last:   last,
		Before: before,
	}
	lockServiceMockComments.Lock()
	mock.calls.Comments = append(mock.calls.Comments, callInfo)
	lockServiceMockComments.Unlock()
	return mock.CommentsFunc(ctx, postID, last, before)
}

// CommentsCalls gets all the calls that were made to Comments.
// Check the length with:
//     len(mockedService.CommentsCalls())
func (mock *ServiceMock) CommentsCalls() []struct {
	Ctx    context.Context
	PostID string
	Last   int
	Before string
} {
	var calls []struct {
		Ctx    context.Context
		PostID string
		Last   int
		Before string
	}
	lockServiceMockComments.RLock()
	calls = mock.calls.Comments
	lockServiceMockComments.RUnlock()
	return calls
}

// CreateComment calls CreateCommentFunc.
func (mock *ServiceMock) CreateComment(ctx context.Context, postID string, content string) (service.Comment, error) {
	if mock.CreateCommentFunc == nil {
		panic("ServiceMock.CreateCommentFunc: method is nil but Service.CreateComment was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		PostID  string
		Content string
	}{
		Ctx:     ctx,
		PostID:  postID,
		Content: content,
	}
	lockServiceMockCreateComment.Lock()
	mock.calls.CreateComment = append(mock.calls.CreateComment, callInfo)
	lockServiceMockCreateComment.Unlock()
	return mock.CreateCommentFunc(ctx, postID, content)
}

// CreateCommentCalls gets all the calls that were made to CreateComment.
// Check the length with:
//     len(mockedService.CreateCommentCalls())
func (mock *ServiceMock) CreateCommentCalls() []struct {
	Ctx     context.Context
	PostID  string
	Content string
} {
	var calls []struct {
		Ctx     context.Context
		PostID  string
		Content string
	}
	lockServiceMockCreateComment.RLock()
	calls = mock.calls.CreateComment
	lockServiceMockCreateComment.RUnlock()
	return calls
}

// CreatePost calls CreatePostFunc.
func (mock *ServiceMock) CreatePost(ctx context.Context, content string, spoilerOf *string, nsfw bool) (service.TimelineItem, error) {
	if mock.CreatePostFunc == nil {
		panic("ServiceMock.CreatePostFunc: method is nil but Service.CreatePost was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Content   string
		SpoilerOf *string
		Nsfw      bool
	}{
		Ctx:       ctx,
		Content:   content,
		SpoilerOf: spoilerOf,
		Nsfw:      nsfw,
	}
	lockServiceMockCreatePost.Lock()
	mock.calls.CreatePost = append(mock.calls.CreatePost, callInfo)
	lockServiceMockCreatePost.Unlock()
	return mock.CreatePostFunc(ctx, content, spoilerOf, nsfw)
}

// CreatePostCalls gets all the calls that were made to CreatePost.
// Check the length with:
//     len(mockedService.CreatePostCalls())
func (mock *ServiceMock) CreatePostCalls() []struct {
	Ctx       context.Context
	Content   string
	SpoilerOf *string
	Nsfw      bool
} {
	var calls []struct {
		Ctx       context.Context
		Content   string
		SpoilerOf *string
		Nsfw      bool
	}
	lockServiceMockCreatePost.RLock()
	calls = mock.calls.CreatePost
	lockServiceMockCreatePost.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *ServiceMock) CreateUser(ctx context.Context, email string, username string) error {
	if mock.CreateUserFunc == nil {
		panic("ServiceMock.CreateUserFunc: method is nil but Service.CreateUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Username string
	}{
		Ctx:      ctx,
		Email:    email,
		Username: username,
	}
	lockServiceMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockServiceMockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, email, username)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedService.CreateUserCalls())
func (mock *ServiceMock) CreateUserCalls() []struct {
	Ctx      context.Context
	Email    string
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Username string
	}
	lockServiceMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockServiceMockCreateUser.RUnlock()
	return calls
}

// DeleteTimelineItem calls DeleteTimelineItemFunc.
func (mock *ServiceMock) DeleteTimelineItem(ctx context.Context, timelineItemID string) error {
	if mock.DeleteTimelineItemFunc == nil {
		panic("ServiceMock.DeleteTimelineItemFunc: method is nil but Service.DeleteTimelineItem was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		TimelineItemID string
	}{
		Ctx:            ctx,
		TimelineItemID: timelineItemID,
	}
	lockServiceMockDeleteTimelineItem.Lock()
	mock.calls.DeleteTimelineItem = append(mock.calls.DeleteTimelineItem, callInfo)
	lockServiceMockDeleteTimelineItem.Unlock()
	return mock.DeleteTimelineItemFunc(ctx, timelineItemID)
}

// DeleteTimelineItemCalls gets all the calls that were made to DeleteTimelineItem.
// Check the length with:
//     len(mockedService.DeleteTimelineItemCalls())
func (mock *ServiceMock) DeleteTimelineItemCalls() []struct {
	Ctx            context.Context
	TimelineItemID string
} {
	var calls []struct {
		Ctx            context.Context
		TimelineItemID string
	}
	lockServiceMockDeleteTimelineItem.RLock()
	calls = mock.calls.DeleteTimelineItem
	lockServiceMockDeleteTimelineItem.RUnlock()
	return calls
}

// DevLogin calls DevLoginFunc.
func (mock *ServiceMock) DevLogin(ctx context.Context, email string) (service.DevLoginOutput, error) {
	if mock.DevLoginFunc == nil {
		panic("ServiceMock.DevLoginFunc: method is nil but Service.DevLogin was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	lockServiceMockDevLogin.Lock()
	mock.calls.DevLogin = append(mock.calls.DevLogin, callInfo)
	lockServiceMockDevLogin.Unlock()
	return mock.DevLoginFunc(ctx, email)
}

// DevLoginCalls gets all the calls that were made to DevLogin.
// Check the length with:
//     len(mockedService.DevLoginCalls())
func (mock *ServiceMock) DevLoginCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	lockServiceMockDevLogin.RLock()
	calls = mock.calls.DevLogin
	lockServiceMockDevLogin.RUnlock()
	return calls
}

// Followees calls FolloweesFunc.
func (mock *ServiceMock) Followees(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error) {
	if mock.FolloweesFunc == nil {
		panic("ServiceMock.FolloweesFunc: method is nil but Service.Followees was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		First    int
		After    string
	}{
		Ctx:      ctx,
		Username: username,
		First:    first,
		After:    after,
	}
	lockServiceMockFollowees.Lock()
	mock.calls.Followees = append(mock.calls.Followees, callInfo)
	lockServiceMockFollowees.Unlock()
	return mock.FolloweesFunc(ctx, username, first, after)
}

// FolloweesCalls gets all the calls that were made to Followees.
// Check the length with:
//     len(mockedService.FolloweesCalls())
func (mock *ServiceMock) FolloweesCalls() []struct {
	Ctx      context.Context
	Username string
	First    int
	After    string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		First    int
		After    string
	}
	lockServiceMockFollowees.RLock()
	calls = mock.calls.Followees
	lockServiceMockFollowees.RUnlock()
	return calls
}

// Followers calls FollowersFunc.
func (mock *ServiceMock) Followers(ctx context.Context, username string, first int, after string) ([]service.UserProfile, error) {
	if mock.FollowersFunc == nil {
		panic("ServiceMock.FollowersFunc: method is nil but Service.Followers was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		First    int
		After    string
	}{
		Ctx:      ctx,
		Username: username,
		First:    first,
		After:    after,
	}
	lockServiceMockFollowers.Lock()
	mock.calls.Followers = append(mock.calls.Followers, callInfo)
	lockServiceMockFollowers.Unlock()
	return mock.FollowersFunc(ctx, username, first, after)
}

// FollowersCalls gets all the calls that were made to Followers.
// Check the length with:
//     len(mockedService.FollowersCalls())
func (mock *ServiceMock) FollowersCalls() []struct {
	Ctx      context.Context
	Username string
	First    int
	After    string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		First    int
		After    string
	}
	lockServiceMockFollowers.RLock()
	calls = mock.calls.Followers
	lockServiceMockFollowers.RUnlock()
	return calls
}

// HasUnreadNotifications calls HasUnreadNotificationsFunc.
func (mock *ServiceMock) HasUnreadNotifications(ctx context.Context) (bool, error) {
	if mock.HasUnreadNotificationsFunc == nil {
		panic("ServiceMock.HasUnreadNotificationsFunc: method is nil but Service.HasUnreadNotifications was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockHasUnreadNotifications.Lock()
	mock.calls.HasUnreadNotifications = append(mock.calls.HasUnreadNotifications, callInfo)
	lockServiceMockHasUnreadNotifications.Unlock()
	return mock.HasUnreadNotificationsFunc(ctx)
}

// HasUnreadNotificationsCalls gets all the calls that were made to HasUnreadNotifications.
// Check the length with:
//     len(mockedService.HasUnreadNotificationsCalls())
func (mock *ServiceMock) HasUnreadNotificationsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockHasUnreadNotifications.RLock()
	calls = mock.calls.HasUnreadNotifications
	lockServiceMockHasUnreadNotifications.RUnlock()
	return calls
}

// MarkNotificationAsRead calls MarkNotificationAsReadFunc.
func (mock *ServiceMock) MarkNotificationAsRead(ctx context.Context, notificationID string) error {
	if mock.MarkNotificationAsReadFunc == nil {
		panic("ServiceMock.MarkNotificationAsReadFunc: method is nil but Service.MarkNotificationAsRead was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		NotificationID string
	}{
		Ctx:            ctx,
		NotificationID: notificationID,
	}
	lockServiceMockMarkNotificationAsRead.Lock()
	mock.calls.MarkNotificationAsRead = append(mock.calls.MarkNotificationAsRead, callInfo)
	lockServiceMockMarkNotificationAsRead.Unlock()
	return mock.MarkNotificationAsReadFunc(ctx, notificationID)
}

// MarkNotificationAsReadCalls gets all the calls that were made to MarkNotificationAsRead.
// Check the length with:
//     len(mockedService.MarkNotificationAsReadCalls())
func (mock *ServiceMock) MarkNotificationAsReadCalls() []struct {
	Ctx            context.Context
	NotificationID string
} {
	var calls []struct {
		Ctx            context.Context
		NotificationID string
	}
	lockServiceMockMarkNotificationAsRead.RLock()
	calls = mock.calls.MarkNotificationAsRead
	lockServiceMockMarkNotificationAsRead.RUnlock()
	return calls
}

// MarkNotificationsAsRead calls MarkNotificationsAsReadFunc.
func (mock *ServiceMock) MarkNotificationsAsRead(ctx context.Context) error {
	if mock.MarkNotificationsAsReadFunc == nil {
		panic("ServiceMock.MarkNotificationsAsReadFunc: method is nil but Service.MarkNotificationsAsRead was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockMarkNotificationsAsRead.Lock()
	mock.calls.MarkNotificationsAsRead = append(mock.calls.MarkNotificationsAsRead, callInfo)
	lockServiceMockMarkNotificationsAsRead.Unlock()
	return mock.MarkNotificationsAsReadFunc(ctx)
}

// MarkNotificationsAsReadCalls gets all the calls that were made to MarkNotificationsAsRead.
// Check the length with:
//     len(mockedService.MarkNotificationsAsReadCalls())
func (mock *ServiceMock) MarkNotificationsAsReadCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockMarkNotificationsAsRead.RLock()
	calls = mock.calls.MarkNotificationsAsRead
	lockServiceMockMarkNotificationsAsRead.RUnlock()
	return calls
}

// NotificationStream calls NotificationStreamFunc.
func (mock *ServiceMock) NotificationStream(ctx context.Context) (<-chan service.Notification, error) {
	if mock.NotificationStreamFunc == nil {
		panic("ServiceMock.NotificationStreamFunc: method is nil but Service.NotificationStream was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockNotificationStream.Lock()
	mock.calls.NotificationStream = append(mock.calls.NotificationStream, callInfo)
	lockServiceMockNotificationStream.Unlock()
	return mock.NotificationStreamFunc(ctx)
}

// NotificationStreamCalls gets all the calls that were made to NotificationStream.
// Check the length with:
//     len(mockedService.NotificationStreamCalls())
func (mock *ServiceMock) NotificationStreamCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockNotificationStream.RLock()
	calls = mock.calls.NotificationStream
	lockServiceMockNotificationStream.RUnlock()
	return calls
}

// Notifications calls NotificationsFunc.
func (mock *ServiceMock) Notifications(ctx context.Context, last int, before string) ([]service.Notification, error) {
	if mock.NotificationsFunc == nil {
		panic("ServiceMock.NotificationsFunc: method is nil but Service.Notifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Last   int
		Before string
	}{
		Ctx:    ctx,
		Last:   last,
		Before: before,
	}
	lockServiceMockNotifications.Lock()
	mock.calls.Notifications = append(mock.calls.Notifications, callInfo)
	lockServiceMockNotifications.Unlock()
	return mock.NotificationsFunc(ctx, last, before)
}

// NotificationsCalls gets all the calls that were made to Notifications.
// Check the length with:
//     len(mockedService.NotificationsCalls())
func (mock *ServiceMock) NotificationsCalls() []struct {
	Ctx    context.Context
	Last   int
	Before string
} {
	var calls []struct {
		Ctx    context.Context
		Last   int
		Before string
	}
	lockServiceMockNotifications.RLock()
	calls = mock.calls.Notifications
	lockServiceMockNotifications.RUnlock()
	return calls
}

// Post calls PostFunc.
func (mock *ServiceMock) Post(ctx context.Context, postID string) (service.Post, error) {
	if mock.PostFunc == nil {
		panic("ServiceMock.PostFunc: method is nil but Service.Post was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		PostID string
	}{
		Ctx:    ctx,
		PostID: postID,
	}
	lockServiceMockPost.Lock()
	mock.calls.Post = append(mock.calls.Post, callInfo)
	lockServiceMockPost.Unlock()
	return mock.PostFunc(ctx, postID)
}

// PostCalls gets all the calls that were made to Post.
// Check the length with:
//     len(mockedService.PostCalls())
func (mock *ServiceMock) PostCalls() []struct {
	Ctx    context.Context
	PostID string
} {
	var calls []struct {
		Ctx    context.Context
		PostID string
	}
	lockServiceMockPost.RLock()
	calls = mock.calls.Post
	lockServiceMockPost.RUnlock()
	return calls
}

// Posts calls PostsFunc.
func (mock *ServiceMock) Posts(ctx context.Context, username string, last int, before string) ([]service.Post, error) {
	if mock.PostsFunc == nil {
		panic("ServiceMock.PostsFunc: method is nil but Service.Posts was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Last     int
		Before   string
	}{
		Ctx:      ctx,
		Username: username,
		Last:     last,
		Before:   before,
	}
	lockServiceMockPosts.Lock()
	mock.calls.Posts = append(mock.calls.Posts, callInfo)
	lockServiceMockPosts.Unlock()
	return mock.PostsFunc(ctx, username, last, before)
}

// PostsCalls gets all the calls that were made to Posts.
// Check the length with:
//     len(mockedService.PostsCalls())
func (mock *ServiceMock) PostsCalls() []struct {
	Ctx      context.Context
	Username string
	Last     int
	Before   string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Last     int
		Before   string
	}
	lockServiceMockPosts.RLock()
	calls = mock.calls.Posts
	lockServiceMockPosts.RUnlock()
	return calls
}

// SendMagicLink calls SendMagicLinkFunc.
func (mock *ServiceMock) SendMagicLink(ctx context.Context, email string, redirectURI string) error {
	if mock.SendMagicLinkFunc == nil {
		panic("ServiceMock.SendMagicLinkFunc: method is nil but Service.SendMagicLink was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Email       string
		RedirectURI string
	}{
		Ctx:         ctx,
		Email:       email,
		RedirectURI: redirectURI,
	}
	lockServiceMockSendMagicLink.Lock()
	mock.calls.SendMagicLink = append(mock.calls.SendMagicLink, callInfo)
	lockServiceMockSendMagicLink.Unlock()
	return mock.SendMagicLinkFunc(ctx, email, redirectURI)
}

// SendMagicLinkCalls gets all the calls that were made to SendMagicLink.
// Check the length with:
//     len(mockedService.SendMagicLinkCalls())
func (mock *ServiceMock) SendMagicLinkCalls() []struct {
	Ctx         context.Context
	Email       string
	RedirectURI string
} {
	var calls []struct {
		Ctx         context.Context
		Email       string
		RedirectURI string
	}
	lockServiceMockSendMagicLink.RLock()
	calls = mock.calls.SendMagicLink
	lockServiceMockSendMagicLink.RUnlock()
	return calls
}

// Timeline calls TimelineFunc.
func (mock *ServiceMock) Timeline(ctx context.Context, last int, before string) ([]service.TimelineItem, error) {
	if mock.TimelineFunc == nil {
		panic("ServiceMock.TimelineFunc: method is nil but Service.Timeline was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Last   int
		Before string
	}{
		Ctx:    ctx,
		Last:   last,
		Before: before,
	}
	lockServiceMockTimeline.Lock()
	mock.calls.Timeline = append(mock.calls.Timeline, callInfo)
	lockServiceMockTimeline.Unlock()
	return mock.TimelineFunc(ctx, last, before)
}

// TimelineCalls gets all the calls that were made to Timeline.
// Check the length with:
//     len(mockedService.TimelineCalls())
func (mock *ServiceMock) TimelineCalls() []struct {
	Ctx    context.Context
	Last   int
	Before string
} {
	var calls []struct {
		Ctx    context.Context
		Last   int
		Before string
	}
	lockServiceMockTimeline.RLock()
	calls = mock.calls.Timeline
	lockServiceMockTimeline.RUnlock()
	return calls
}

// TimelineItemStream calls TimelineItemStreamFunc.
func (mock *ServiceMock) TimelineItemStream(ctx context.Context) (<-chan service.TimelineItem, error) {
	if mock.TimelineItemStreamFunc == nil {
		panic("ServiceMock.TimelineItemStreamFunc: method is nil but Service.TimelineItemStream was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockTimelineItemStream.Lock()
	mock.calls.TimelineItemStream = append(mock.calls.TimelineItemStream, callInfo)
	lockServiceMockTimelineItemStream.Unlock()
	return mock.TimelineItemStreamFunc(ctx)
}

// TimelineItemStreamCalls gets all the calls that were made to TimelineItemStream.
// Check the length with:
//     len(mockedService.TimelineItemStreamCalls())
func (mock *ServiceMock) TimelineItemStreamCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockTimelineItemStream.RLock()
	calls = mock.calls.TimelineItemStream
	lockServiceMockTimelineItemStream.RUnlock()
	return calls
}

// ToggleCommentLike calls ToggleCommentLikeFunc.
func (mock *ServiceMock) ToggleCommentLike(ctx context.Context, commentID string) (service.ToggleLikeOutput, error) {
	if mock.ToggleCommentLikeFunc == nil {
		panic("ServiceMock.ToggleCommentLikeFunc: method is nil but Service.ToggleCommentLike was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CommentID string
	}{
		Ctx:       ctx,
		CommentID: commentID,
	}
	lockServiceMockToggleCommentLike.Lock()
	mock.calls.ToggleCommentLike = append(mock.calls.ToggleCommentLike, callInfo)
	lockServiceMockToggleCommentLike.Unlock()
	return mock.ToggleCommentLikeFunc(ctx, commentID)
}

// ToggleCommentLikeCalls gets all the calls that were made to ToggleCommentLike.
// Check the length with:
//     len(mockedService.ToggleCommentLikeCalls())
func (mock *ServiceMock) ToggleCommentLikeCalls() []struct {
	Ctx       context.Context
	CommentID string
} {
	var calls []struct {
		Ctx       context.Context
		CommentID string
	}
	lockServiceMockToggleCommentLike.RLock()
	calls = mock.calls.ToggleCommentLike
	lockServiceMockToggleCommentLike.RUnlock()
	return calls
}

// ToggleFollow calls ToggleFollowFunc.
func (mock *ServiceMock) ToggleFollow(ctx context.Context, username string) (service.ToggleFollowOutput, error) {
	if mock.ToggleFollowFunc == nil {
		panic("ServiceMock.ToggleFollowFunc: method is nil but Service.ToggleFollow was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	lockServiceMockToggleFollow.Lock()
	mock.calls.ToggleFollow = append(mock.calls.ToggleFollow, callInfo)
	lockServiceMockToggleFollow.Unlock()
	return mock.ToggleFollowFunc(ctx, username)
}

// ToggleFollowCalls gets all the calls that were made to ToggleFollow.
// Check the length with:
//     len(mockedService.ToggleFollowCalls())
func (mock *ServiceMock) ToggleFollowCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	lockServiceMockToggleFollow.RLock()
	calls = mock.calls.ToggleFollow
	lockServiceMockToggleFollow.RUnlock()
	return calls
}

// TogglePostLike calls TogglePostLikeFunc.
func (mock *ServiceMock) TogglePostLike(ctx context.Context, postID string) (service.ToggleLikeOutput, error) {
	if mock.TogglePostLikeFunc == nil {
		panic("ServiceMock.TogglePostLikeFunc: method is nil but Service.TogglePostLike was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		PostID string
	}{
		Ctx:    ctx,
		PostID: postID,
	}
	lockServiceMockTogglePostLike.Lock()
	mock.calls.TogglePostLike = append(mock.calls.TogglePostLike, callInfo)
	lockServiceMockTogglePostLike.Unlock()
	return mock.TogglePostLikeFunc(ctx, postID)
}

// TogglePostLikeCalls gets all the calls that were made to TogglePostLike.
// Check the length with:
//     len(mockedService.TogglePostLikeCalls())
func (mock *ServiceMock) TogglePostLikeCalls() []struct {
	Ctx    context.Context
	PostID string
} {
	var calls []struct {
		Ctx    context.Context
		PostID string
	}
	lockServiceMockTogglePostLike.RLock()
	calls = mock.calls.TogglePostLike
	lockServiceMockTogglePostLike.RUnlock()
	return calls
}

// TogglePostSubscription calls TogglePostSubscriptionFunc.
func (mock *ServiceMock) TogglePostSubscription(ctx context.Context, postID string) (service.ToggleSubscriptionOutput, error) {
	if mock.TogglePostSubscriptionFunc == nil {
		panic("ServiceMock.TogglePostSubscriptionFunc: method is nil but Service.TogglePostSubscription was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		PostID string
	}{
		Ctx:    ctx,
		PostID: postID,
	}
	lockServiceMockTogglePostSubscription.Lock()
	mock.calls.TogglePostSubscription = append(mock.calls.TogglePostSubscription, callInfo)
	lockServiceMockTogglePostSubscription.Unlock()
	return mock.TogglePostSubscriptionFunc(ctx, postID)
}

// TogglePostSubscriptionCalls gets all the calls that were made to TogglePostSubscription.
// Check the length with:
//     len(mockedService.TogglePostSubscriptionCalls())
func (mock *ServiceMock) TogglePostSubscriptionCalls() []struct {
	Ctx    context.Context
	PostID string
} {
	var calls []struct {
		Ctx    context.Context
		PostID string
	}
	lockServiceMockTogglePostSubscription.RLock()
	calls = mock.calls.TogglePostSubscription
	lockServiceMockTogglePostSubscription.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *ServiceMock) Token(ctx context.Context) (service.TokenOutput, error) {
	if mock.TokenFunc == nil {
		panic("ServiceMock.TokenFunc: method is nil but Service.Token was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	lockServiceMockToken.Unlock()
	return mock.TokenFunc(ctx)
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//     len(mockedService.TokenCalls())
func (mock *ServiceMock) TokenCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockToken.RLock()
	calls = mock.calls.Token
	lockServiceMockToken.RUnlock()
	return calls
}

// UpdateAvatar calls UpdateAvatarFunc.
func (mock *ServiceMock) UpdateAvatar(ctx context.Context, r io.Reader) (string, error) {
	if mock.UpdateAvatarFunc == nil {
		panic("ServiceMock.UpdateAvatarFunc: method is nil but Service.UpdateAvatar was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   io.Reader
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockUpdateAvatar.Lock()
	mock.calls.UpdateAvatar = append(mock.calls.UpdateAvatar, callInfo)
	lockServiceMockUpdateAvatar.Unlock()
	return mock.UpdateAvatarFunc(ctx, r)
}

// UpdateAvatarCalls gets all the calls that were made to UpdateAvatar.
// Check the length with:
//     len(mockedService.UpdateAvatarCalls())
func (mock *ServiceMock) UpdateAvatarCalls() []struct {
	Ctx context.Context
	R   io.Reader
} {
	var calls []struct {
		Ctx context.Context
		R   io.Reader
	}
	lockServiceMockUpdateAvatar.RLock()
	calls = mock.calls.UpdateAvatar
	lockServiceMockUpdateAvatar.RUnlock()
	return calls
}

// User calls UserFunc.
func (mock *ServiceMock) User(ctx context.Context, username string) (service.UserProfile, error) {
	if mock.UserFunc == nil {
		panic("ServiceMock.UserFunc: method is nil but Service.User was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
	}{
		Ctx:      ctx,
		Username: username,
	}
	lockServiceMockUser.Lock()
	mock.calls.User = append(mock.calls.User, callInfo)
	lockServiceMockUser.Unlock()
	return mock.UserFunc(ctx, username)
}

// UserCalls gets all the calls that were made to User.
// Check the length with:
//     len(mockedService.UserCalls())
func (mock *ServiceMock) UserCalls() []struct {
	Ctx      context.Context
	Username string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
	}
	lockServiceMockUser.RLock()
	calls = mock.calls.User
	lockServiceMockUser.RUnlock()
	return calls
}

// Usernames calls UsernamesFunc.
func (mock *ServiceMock) Usernames(ctx context.Context, startingWith string, first int, after string) ([]string, error) {
	if mock.UsernamesFunc == nil {
		panic("ServiceMock.UsernamesFunc: method is nil but Service.Usernames was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		StartingWith string
		First        int
		After        string
	}{
		Ctx:          ctx,
		StartingWith: startingWith,
		First:        first,
		After:        after,
	}
	lockServiceMockUsernames.Lock()
	mock.calls.Usernames = append(mock.calls.Usernames, callInfo)
	lockServiceMockUsernames.Unlock()
	return mock.UsernamesFunc(ctx, startingWith, first, after)
}

// UsernamesCalls gets all the calls that were made to Usernames.
// Check the length with:
//     len(mockedService.UsernamesCalls())
func (mock *ServiceMock) UsernamesCalls() []struct {
	Ctx          context.Context
	StartingWith string
	First        int
	After        string
} {
	var calls []struct {
		Ctx          context.Context
		StartingWith string
		First        int
		After        string
	}
	lockServiceMockUsernames.RLock()
	calls = mock.calls.Usernames
	lockServiceMockUsernames.RUnlock()
	return calls
}

// Users calls UsersFunc.
func (mock *ServiceMock) Users(ctx context.Context, search string, first int, after string) ([]service.UserProfile, error) {
	if mock.UsersFunc == nil {
		panic("ServiceMock.UsersFunc: method is nil but Service.Users was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Search string
		First  int
		After  string
	}{
		Ctx:    ctx,
		Search: search,
		First:  first,
		After:  after,
	}
	lockServiceMockUsers.Lock()
	mock.calls.Users = append(mock.calls.Users, callInfo)
	lockServiceMockUsers.Unlock()
	return mock.UsersFunc(ctx, search, first, after)
}

// UsersCalls gets all the calls that were made to Users.
// Check the length with:
//     len(mockedService.UsersCalls())
func (mock *ServiceMock) UsersCalls() []struct {
	Ctx    context.Context
	Search string
	First  int
	After  string
} {
	var calls []struct {
		Ctx    context.Context
		Search string
		First  int
		After  string
	}
	lockServiceMockUsers.RLock()
	calls = mock.calls.Users
	lockServiceMockUsers.RUnlock()
	return calls
}
